library(tidyverse)
library(faraway)
library(boot)
library(car)
library(gam)
library(MASS)
library(robsel)
library(regutools)
knitr::opts_chunk$set(echo=TRUE,
cache=FALSE,
fig.width=5,
fig.height=5,
fig.align='center')
indent1 = '    '
indent2 = paste(rep(indent1, 2), collapse='')
indent3 = paste(rep(indent1, 3), collapse='')
require(Matrix) # convenient to deal with sparse matrices, has sparseMatrix() in it
########
### read in, clean, and construct data
########
# read in observed data
data.ecoli.orig <- read.table("DREAM-Ecoli/input-data/net3_expression_data.tsv", header=T, sep="\t")
data.ecoli.TF <- data.ecoli.orig[,1:334]
data.ecoli.TF.scaled <- scale(data.ecoli.TF)
data.ecoli.scaled <- scale(data.ecoli.orig)
data.cov <- cov(data.ecoli.scaled)
#gene.names <- colnames(data.cov)
gene.names <- colnames(data.ecoli.orig)
data.cov[1:10,1:10]
gold.standard <- read.table("DREAM-Ecoli/gold-standard/DREAM5_NetworkInference_GoldStandard_Network3.tsv", header=F, sep="\t")
gold.standard.TF <- filter(gold.standard, V1 %in% gene.names & V2 %in% gene.names )
true.omega <- diag(length(gene.names))
colnames(true.omega) <- gene.names
rownames(true.omega) <- gene.names
for (i in 1:22278) {
tf.row <- gold.standard.TF[i,]
true.omega[tf.row$V1, tf.row$V2] <- tf.row$V3
}
true.omega <- (true.omega + t(true.omega)) != 0
true.omega <- replace(true.omega, true.omega > 0, 1)
sum(true.omega - t(true.omega))
library(knitr)
library(tidyverse)
library(faraway)
library(boot)
library(car)
library(gam)
library(MASS)
library(robsel)
knitr::opts_chunk$set(echo=TRUE,
cache=FALSE,
fig.width=5,
fig.height=5,
fig.align='center')
indent1 = '    '
indent2 = paste(rep(indent1, 2), collapse='')
indent3 = paste(rep(indent1, 3), collapse='')
require(Matrix) # convenient to deal with sparse matrices, has sparseMatrix() in it
########
### read in, clean, and construct data
########
# read in observed data
data.ecoli.orig <- read.table("DREAM-Ecoli/input-data/net3_expression_data.tsv", header=T, sep="\t")
data.ecoli.TF <- data.ecoli.orig[,1:334]
data.ecoli.TF.scaled <- scale(data.ecoli.TF)
data.ecoli.scaled <- scale(data.ecoli.orig)
data.cov <- cov(data.ecoli.scaled)
#gene.names <- colnames(data.cov)
gene.names <- colnames(data.ecoli.orig)
gold.standard <- read.table("DREAM-Ecoli/gold-standard/DREAM5_NetworkInference_GoldStandard_Network3.tsv", header=F, sep="\t")
gold.standard.TF <- filter(gold.standard, V1 %in% gene.names & V2 %in% gene.names )
unique(c(gold.standard$V1, gold.standard$V2))
length(unique(c(gold.standard$V1, gold.standard$V2)))
library(knitr)
library(tidyverse)
library(faraway)
library(boot)
library(car)
library(gam)
library(MASS)
library(robsel)
knitr::opts_chunk$set(echo=TRUE,
cache=FALSE,
fig.width=5,
fig.height=5,
fig.align='center')
indent1 = '    '
indent2 = paste(rep(indent1, 2), collapse='')
indent3 = paste(rep(indent1, 3), collapse='')
require(Matrix) # convenient to deal with sparse matrices, has sparseMatrix() in it
gold.standard <- read.table("DREAM-Ecoli/gold-standard/DREAM5_NetworkInference_GoldStandard_Network3.tsv", header=F, sep="\t")
gold.standard.TF <- filter(gold.standard, V1 %in% gene.names & V2 %in% gene.names )
unique(c(gold.standard$V1, gold.standard$V2))
length(unique(c(gold.standard$V1, gold.standard$V2)))
library(knitr)
library(tidyverse)
library(faraway)
library(boot)
library(car)
library(gam)
library(MASS)
library(robsel)
library(regutools)
knitr::opts_chunk$set(echo=TRUE,
cache=FALSE,
fig.width=5,
fig.height=5,
fig.align='center')
indent1 = '    '
indent2 = paste(rep(indent1, 2), collapse='')
indent3 = paste(rep(indent1, 3), collapse='')
require(Matrix) # convenient to deal with sparse matrices, has sparseMatrix() in it
########
### read in, clean, and construct data
########
# read in observed data
data.ecoli.orig <- read.table("E_coli_v4_Build_6/avg_E_coli_v4_Build_6_exps466probes4297.tab",
row.names=1, header=T, sep="\t")
data.ecoli <- t(data.ecoli.orig)
data.ecoli <- scale(data.ecoli)
# read in probe set names so we can change use standard "friendly" names
data.names.tab <- read.table("E_coli_v4_Build_6/E_coli_v4_Build_6.probe_set_descriptions",
row.names=1, header=T, sep="\t")
# check to see we're changing names correctly
colnames(data.ecoli) <- (data.names.tab[
match(rownames(data.ecoli.orig), rownames(data.names.tab)),"friendly_name"])
cbind(colnames(data.ecoli)[1:10], rownames(data.names.tab)[
match(rownames(data.ecoli.orig), rownames(data.names.tab))][1:10])
data.cov <- cov(data.ecoli)
data.cov[1:10,1:10]
regulondb_conn <- connect_database()
## Build a regulondb object
e_coli_regulondb <-
regulondb(
database_conn = regulondb_conn,
organism = "E.coli",
database_version = "1",
genome_version = "1"
)
e_coli_regulondb
set <- get_regulatory_network(e_coli_regulondb, type="GENE-GENE")
set1 <- unique(set$regulated)
set2 <- unique(as.vector(str_split(set$regulator, ",", simplify = TRUE)))
#for (i in 1:length(set)) {
#  set[i] <- tolower(set[i])
#}
set <- sort(c(set1, set2))
myvars <- colnames(data.cov) %in% set
sum(myvars)
#data.subset <- scale(data.ecoli)[,myvars]
data.subset <- (data.ecoli[,myvars])
gene.names <- colnames(data.subset)
library(knitr)
library(tidyverse)
library(faraway)
library(boot)
library(car)
library(gam)
library(MASS)
library(robsel)
library(regutools)
knitr::opts_chunk$set(echo=TRUE,
cache=FALSE,
fig.width=5,
fig.height=5,
fig.align='center')
indent1 = '    '
indent2 = paste(rep(indent1, 2), collapse='')
indent3 = paste(rep(indent1, 3), collapse='')
require(Matrix) # convenient to deal with sparse matrices, has sparseMatrix() in it
########
### read in, clean, and construct data
########
# read in observed data
data.ecoli.orig <- read.table("E_coli_v4_Build_6/avg_E_coli_v4_Build_6_exps466probes4297.tab",
row.names=1, header=T, sep="\t")
data.ecoli <- t(data.ecoli.orig)
data.ecoli <- scale(data.ecoli)
# read in probe set names so we can change use standard "friendly" names
data.names.tab <- read.table("E_coli_v4_Build_6/E_coli_v4_Build_6.probe_set_descriptions",
row.names=1, header=T, sep="\t")
# check to see we're changing names correctly
colnames(data.ecoli) <- (data.names.tab[
match(rownames(data.ecoli.orig), rownames(data.names.tab)),"friendly_name"])
cbind(colnames(data.ecoli)[1:10], rownames(data.names.tab)[
match(rownames(data.ecoli.orig), rownames(data.names.tab))][1:10])
data.cov <- cov(data.ecoli)
data.cov[1:10,1:10]
regulondb_conn <- connect_database()
## Build a regulondb object
e_coli_regulondb <-
regulondb(
database_conn = regulondb_conn,
organism = "E.coli",
database_version = "1",
genome_version = "1"
)
e_coli_regulondb
set <- get_regulatory_network(e_coli_regulondb, type="GENE-GENE")
set1 <- unique(set$regulated)
set2 <- unique(as.vector(str_split(set$regulator, ",", simplify = TRUE)))
#for (i in 1:length(set)) {
#  set[i] <- tolower(set[i])
#}
set <- sort(c(set1, set2))
set <- get_regulatory_network(e_coli_regulondb, type="GENE-GENE")
set1 <- unique(set$regulated)
set2 <- unique(as.vector(str_split(set$regulator, ",", simplify = TRUE)))
#for (i in 1:length(set)) {
#  set[i] <- tolower(set[i])
#}
set <- sort(c(set1, set2))
myvars <- colnames(data.cov) %in% set
sum(myvars)
#data.subset <- scale(data.ecoli)[,myvars]
data.subset <- (data.ecoli[,myvars])
gene.names <- colnames(data.subset)
myvars <- colnames(data.cov) %in% set
sum(myvars)
#data.subset <- scale(data.ecoli)[,myvars]
data.subset <- (data.ecoli[,myvars])
gene.names <- colnames(data.subset)
true.omega <- diag(length(gene.names))
colnames(true.omega) <- gene.names
rownames(true.omega) <- gene.names
for (gene in gene.names) {
regulator <- get_gene_regulators(e_coli_regulondb, genes=c(gene), output.type = "GENE")
regulator <- as.vector(str_split(get_gene_regulators(e_coli_regulondb, genes=c(gene),
output.type = "GENE")$regulators,
",", simplify = TRUE))
regulator <- na.omit(regulator)
regulator <- regulator[regulator %in% gene.names]
true.omega[gene, regulator] <- 1
true.omega[regulator, gene] <- 1
true.omega[regulator, regulator] <- 1
}
true.omega <- diag(length(gene.names))
colnames(true.omega) <- gene.names
rownames(true.omega) <- gene.names
for (gene in gene.names) {
regulator <- get_gene_regulators(e_coli_regulondb, genes=c(gene), output.type = "GENE")
regulator <- as.vector(str_split(get_gene_regulators(e_coli_regulondb, genes=c(gene),
output.type = "GENE")$regulators,
",", simplify = TRUE))
regulator <- na.omit(regulator)
regulator <- regulator[regulator %in% gene.names]
true.omega[gene, regulator] <- 1
true.omega[regulator, gene] <- 1
true.omega[regulator, regulator] <- 1
}
sum(true.omega[upper.tri(true.omega, diag = FALSE)])
true.omega.np <- true.omega
colnames(true.omega.np) <- NULL
rownames(true.omega.np) <- NULL
write.table(true.omega.np, 'true_omega_regulon.txt', col.names = F, row.names = F)
write.table(data.subset, 'data_subset_m3d.txt', col.names = F, row.names = F)
true.omega <- diag(length(gene.names))
colnames(true.omega) <- gene.names
rownames(true.omega) <- gene.names
for (gene in gene.names) {
regulator <- get_gene_regulators(e_coli_regulondb, genes=c(gene), output.type = "GENE")
regulator <- as.vector(str_split(get_gene_regulators(e_coli_regulondb, genes=c(gene),
output.type = "GENE")$regulators,
",", simplify = TRUE))
regulator <- na.omit(regulator)
regulator <- regulator[regulator %in% gene.names]
true.omega[gene, regulator] <- 1
true.omega[regulator, gene] <- 1
#true.omega[regulator, regulator] <- 1
}
sum(true.omega[upper.tri(true.omega, diag = FALSE)])
true.omega.np <- true.omega
colnames(true.omega.np) <- NULL
rownames(true.omega.np) <- NULL
write.table(true.omega.np, 'true_omega_regulon.txt', col.names = F, row.names = F)
write.table(data.subset, 'data_subset_m3d.txt', col.names = F, row.names = F)
library(knitr)
library(tidyverse)
library(faraway)
library(boot)
library(car)
library(gam)
library(MASS)
library(robsel)
library(regutools)
knitr::opts_chunk$set(echo=TRUE,
cache=FALSE,
fig.width=5,
fig.height=5,
fig.align='center')
indent1 = '    '
indent2 = paste(rep(indent1, 2), collapse='')
indent3 = paste(rep(indent1, 3), collapse='')
require(Matrix) # convenient to deal with sparse matrices, has sparseMatrix() in it
########
### read in, clean, and construct data
########
# read in observed data
data.ecoli.orig <- read.table("E_coli_v4_Build_6/avg_E_coli_v4_Build_6_exps466probes4297.tab",
row.names=1, header=T, sep="\t")
data.ecoli <- t(data.ecoli.orig)
data.ecoli <- scale(data.ecoli)
# read in probe set names so we can change use standard "friendly" names
data.names.tab <- read.table("E_coli_v4_Build_6/E_coli_v4_Build_6.probe_set_descriptions",
row.names=1, header=T, sep="\t")
# check to see we're changing names correctly
colnames(data.ecoli) <- (data.names.tab[
match(rownames(data.ecoli.orig), rownames(data.names.tab)),"friendly_name"])
cbind(colnames(data.ecoli)[1:10], rownames(data.names.tab)[
match(rownames(data.ecoli.orig), rownames(data.names.tab))][1:10])
data.cov <- cov(data.ecoli)
data.cov[1:10,1:10]
regulondb_conn <- connect_database()
## Build a regulondb object
e_coli_regulondb <-
regulondb(
database_conn = regulondb_conn,
organism = "E.coli",
database_version = "1",
genome_version = "1"
)
e_coli_regulondb
set <- get_regulatory_network(e_coli_regulondb, type="GENE-GENE")
set1 <- unique(set$regulated)
set2 <- unique(as.vector(str_split(set$regulator, ",", simplify = TRUE)))
#for (i in 1:length(set)) {
#  set[i] <- tolower(set[i])
#}
set <- sort(c(set1, set2))
myvars <- colnames(data.cov) %in% set
sum(myvars)
#data.subset <- scale(data.ecoli)[,myvars]
data.subset <- (data.ecoli[,myvars])
gene.names <- colnames(data.subset)
true.omega <- diag(length(gene.names))
colnames(true.omega) <- gene.names
rownames(true.omega) <- gene.names
for (gene in gene.names) {
regulator <- get_gene_regulators(e_coli_regulondb, genes=c(gene), output.type = "GENE")
regulator <- as.vector(str_split(get_gene_regulators(e_coli_regulondb, genes=c(gene),
output.type = "GENE")$regulators,
",", simplify = TRUE))
regulator <- na.omit(regulator)
regulator <- regulator[regulator %in% gene.names]
true.omega[gene, regulator] <- 1
true.omega[regulator, gene] <- 1
true.omega[regulator, regulator] <- 1
}
sum(true.omega[upper.tri(true.omega, diag = FALSE)])
true.omega.np <- true.omega
colnames(true.omega.np) <- NULL
rownames(true.omega.np) <- NULL
write.table(true.omega.np, 'true_omega_regulon.txt', col.names = F, row.names = F)
write.table(data.subset, 'data_subset_m3d.txt', col.names = F, row.names = F)
library(knitr)
library(tidyverse)
library(faraway)
library(boot)
library(car)
library(gam)
library(MASS)
library(robsel)
knitr::opts_chunk$set(echo=TRUE,
cache=FALSE,
fig.width=5,
fig.height=5,
fig.align='center')
indent1 = '    '
indent2 = paste(rep(indent1, 2), collapse='')
indent3 = paste(rep(indent1, 3), collapse='')
require(Matrix) # convenient to deal with sparse matrices, has sparseMatrix() in it
########
### read in, clean, and construct data
########
# read in observed data
data.ecoli.orig <- read.table("DREAM-Ecoli/input-data/net3_expression_data.tsv", header=T, sep="\t")
data.ecoli.scaled <- scale(data.ecoli.orig)
data.cov <- cov(data.ecoli.scaled)
#gene.names <- colnames(data.ecoli.orig)
data.cov[1:10,1:10]
gold.standard <- read.table("DREAM-Ecoli/gold-standard/DREAM5_Network3_edges_only.tsv", header=F, sep="\t")
View(gold.standard)
gene.names <- colnames(data.ecoli.orig)
length(gene.names)
true.Ecoli.network <- diag(length(gene.names))
colnames(true.omega) <- gene.names
colnames(true.Ecoli.network ) <- gene.names
rownames(true.Ecoli.network ) <- gene.names
length(gold.standard)
length(gold.standard$V1)
View(gold.standard)
View(true.Ecoli.network)
View(true.Ecoli.network)
gold.standard.TF[1,]
gold.standard[1,]
gold.standard[1,1]
gold.standard[1,2]
gold.standard[1,3]
gold.standard[1,][1]
true.Ecoli.network <- diag(length(gene.names))
colnames(true.Ecoli.network) <- gene.names
rownames(true.Ecoli.network) <- gene.names
for (i in 1:length(gold.standard$V1)) {
tf.row <- gold.standard[i,]
true.omega[tf.row$V1, tf.row$V2] <- tf.row$V3
true.omega[tf.row$V2, tf.row$V1] <- tf.row$V3
}
true.Ecoli.network <- diag(length(gene.names))
colnames(true.Ecoli.network) <- gene.names
rownames(true.Ecoli.network) <- gene.names
for (i in 1:length(gold.standard$V1)) {
tf.row <- gold.standard[i,]
true.Ecoli.network[tf.row$V1, tf.row$V2] <- tf.row$V3
true.Ecoli.network[tf.row$V2, tf.row$V1] <- tf.row$V3
}
#true.omega <- (true.omega + t(true.omega)) != 0
#true.omega <- replace(true.omega, true.omega > 0, 1)
true.Ecoli.network
true.Ecoli.network["G92", "G2"]
true.Ecoli.network["G2", "G92"]
#true.omega <- (true.omega + t(true.omega)) != 0
#true.omega <- replace(true.omega, true.omega > 0, 1)
true.Ecoli.network[1:10, 1:10]
#true.omega <- (true.omega + t(true.omega)) != 0
#true.omega <- replace(true.omega, true.omega > 0, 1)
true.Ecoli.network[90:100, 1:10]
Ecoli.robsel <- robsel.glasso(data.ecoli.scaled, alpha = 0.01)
Ecoli.robsel <- robsel.glasso(data.ecoli.scaled[,1:10], alpha = 0.01)
sum(gene.robsel$Omega[upper.tri(gene.robsel, diag = FALSE)]!=0)
sum(Ecoli.robsell$Omega[upper.tri(gene.robsel, diag = FALSE)]!=0)
sum(Ecoli.robsel$Omega[upper.tri(gene.robsel, diag = FALSE)]!=0)
sum(Ecoli.robsel$Omega[upper.tri(Ecoli.robsel, diag = FALSE)]!=0)
Ecoli.robsel <- robsel.glasso(data.ecoli.scaled[,1:330], alpha = 0.01)
sum(Ecoli.robsel$Omega[upper.tri(Ecoli.robsel, diag = FALSE)]!=0)
sum(Ecoli.robsel$Omega[upper.tri(Ecoli.robsel, diag = FALSE)]!=0)
sum(Ecoli.robsel$Omega[upper.tri(Ecoli.robsel, diag = FALSE)]!=0)
Ecoli.robsel <- robsel.glasso(data.ecoli.scaled[,1:330], alpha = 0.05)
sum(Ecoli.robsel$Omega[upper.tri(Ecoli.robsel, diag = FALSE)]!=0)
sum(Ecoli.robsel$Omega[upper.tri(Ecoli.robsel, diag = FALSE)]!=0)
sum(Ecoli.robsel$Omega[upper.tri(Ecoli.robsel, diag = FALSE)]!=0)
Omega[upper.tri(Ecoli.robsel, diag = FALSE)]
Ecoli.robsel$Omega
diag(Ecoli.robsel$Omega)
sum(Ecoli.robsel$Omega[lower.tri(Ecoli.robsel, diag = FALSE)]!=0)
?lower.tri
Ecoli.robsel
sum(Ecoli.robsel$Omega[lower.tri(Ecoli.robsel$Omega, diag = FALSE)]!=0)
sum(Ecoli.robsel$Omega[lower.tri(Ecoli.robsel$Omega, diag = FALSE)]!=0)
sum(Ecoli.robsel$Omega[lower.tri(Ecoli.robsel$Omega, diag = FALSE)]!=0)
sum(Ecoli.robsel$Omega[upper.tri(Ecoli.robsel$Omega, diag = FALSE)]!=0)
sum((Ecoli.robsel$Omega[upper.tri(Ecoli.robsel$Omega, diag = FALSE)]!=0) == (true.Ecoli.network[upper.tri(Ecoli.robsel$Omega, diag = FALSE)]!=0))
typeof(true.Ecoli.network)
typeof(Ecoli.robsel$Omega)
sum((Ecoli.robsel$Omega[upper.tri(Ecoli.robsel$Omega, diag = FALSE)]!=0) - (true.Ecoli.network[upper.tri(Ecoli.robsel$Omega, diag = FALSE)]!=0))
sum((Ecoli.robsel$Omega[upper.tri(Ecoli.robsel$Omega, diag = FALSE)]!=0) - (true.Ecoli.network[,1:330][upper.tri(Ecoli.robsel$Omega, diag = FALSE)]!=0))
Ecoli.robsel.Omega <- Ecoli.robsel$Omega
install.packages('qgraph')
library(qgraph)
nrow(data.ecoli.scaled)
?glasso
library(knitr)
library(tidyverse)
library(faraway)
library(boot)
library(car)
library(gam)
library(MASS)
library(robsel)
library(qgraph)
knitr::opts_chunk$set(echo=TRUE,
cache=FALSE,
fig.width=5,
fig.height=5,
fig.align='center')
indent1 = '    '
indent2 = paste(rep(indent1, 2), collapse='')
indent3 = paste(rep(indent1, 3), collapse='')
require(Matrix) # convenient to deal with sparse matrices, has sparseMatrix() in it
########
### read in, clean, and construct data
########
# read in observed data
data.ecoli.orig <- read.table("DREAM-Ecoli/input-data/net3_expression_data.tsv", header=T, sep="\t")
data.ecoli.scaled <- scale(data.ecoli.orig)
data.cov <- cov(data.ecoli.scaled)
gene.names <- colnames(data.ecoli.orig)
data.cov[1:10,1:10]
ptm <- proc.time()
robsel(data.ecoli.scaled)
proc.time() - ptm
ptm <- proc.time()
robsel(data.ecoli.scaled, B=2)
proc.time() - ptm
X = 10
~
?
s
pwd
pwd()
getwd()
?robsel
read.table("DREAM-Ecoli/input-data/net3_expression_data.tsv", header=T, sep="\t")
setwd("~/research-code/gene-network")
read.table("DREAM-Ecoli/input-data/net3_expression_data.tsv", header=T, sep="\t")
read.table("Ecoli/DREAM-Ecoli/input-data/net3_expression_data.tsv", header=T, sep="\t")
test = read.table("DREAM-Ecoli/input-data/net3_expression_data.tsv", header=T, sep="\t")
test = read.table("Ecoli/DREAM-Ecoli/input-data/net3_expression_data.tsv", header=T, sep="\t")
test2 = read.table("In-silico/DREAM-in-silico/input-data/net1_expression_data.tsv", header=T, sep="\t")
setwd("~/research-code/gene-network/In-silico/DREAM-in-silico/input data")
test2 = read.table("net1_expression_data.tsv", header=T, sep="\t")
setwd("~/research-code/gene-network/Scerevisiae/DREAM-Scerevisiae/input data")
test3 = read.table("net4_expression_data.tsv", header=T, sep="\t")
